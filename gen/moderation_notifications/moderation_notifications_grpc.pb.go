// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: moderation_notifications.proto

package moderation_notifications

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModerationNotifications_NotifyAboutApprovedModerationRequest_FullMethodName     = "/moderation_notifications.ModerationNotifications/NotifyAboutApprovedModerationRequest"
	ModerationNotifications_NotifyUserAboutVerificatedAccount_FullMethodName        = "/moderation_notifications.ModerationNotifications/NotifyUserAboutVerificatedAccount"
	ModerationNotifications_NotifyAboutApprovedTitleTranslateRequest_FullMethodName = "/moderation_notifications.ModerationNotifications/NotifyAboutApprovedTitleTranslateRequest"
	ModerationNotifications_NotifyAboutNewChapterInTitle_FullMethodName             = "/moderation_notifications.ModerationNotifications/NotifyAboutNewChapterInTitle"
	ModerationNotifications_SendMessageToUser_FullMethodName                        = "/moderation_notifications.ModerationNotifications/SendMessageToUser"
	ModerationNotifications_SendModerationRequestDeclineReason_FullMethodName       = "/moderation_notifications.ModerationNotifications/SendModerationRequestDeclineReason"
	ModerationNotifications_NotifyAboutDeclinedTitleTranslateRequest_FullMethodName = "/moderation_notifications.ModerationNotifications/NotifyAboutDeclinedTitleTranslateRequest"
)

// ModerationNotificationsClient is the client API for ModerationNotifications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModerationNotificationsClient interface {
	NotifyAboutApprovedModerationRequest(ctx context.Context, in *ApprovedEntity, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NotifyUserAboutVerificatedAccount(ctx context.Context, in *VerificatedUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NotifyAboutApprovedTitleTranslateRequest(ctx context.Context, in *TitleTranslateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NotifyAboutNewChapterInTitle(ctx context.Context, in *Chapter, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendMessageToUser(ctx context.Context, in *MessageFromModerator, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendModerationRequestDeclineReason(ctx context.Context, in *ModerationRequestDeclineReason, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NotifyAboutDeclinedTitleTranslateRequest(ctx context.Context, in *TitleTranslateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type moderationNotificationsClient struct {
	cc grpc.ClientConnInterface
}

func NewModerationNotificationsClient(cc grpc.ClientConnInterface) ModerationNotificationsClient {
	return &moderationNotificationsClient{cc}
}

func (c *moderationNotificationsClient) NotifyAboutApprovedModerationRequest(ctx context.Context, in *ApprovedEntity, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModerationNotifications_NotifyAboutApprovedModerationRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationNotificationsClient) NotifyUserAboutVerificatedAccount(ctx context.Context, in *VerificatedUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModerationNotifications_NotifyUserAboutVerificatedAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationNotificationsClient) NotifyAboutApprovedTitleTranslateRequest(ctx context.Context, in *TitleTranslateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModerationNotifications_NotifyAboutApprovedTitleTranslateRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationNotificationsClient) NotifyAboutNewChapterInTitle(ctx context.Context, in *Chapter, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModerationNotifications_NotifyAboutNewChapterInTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationNotificationsClient) SendMessageToUser(ctx context.Context, in *MessageFromModerator, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModerationNotifications_SendMessageToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationNotificationsClient) SendModerationRequestDeclineReason(ctx context.Context, in *ModerationRequestDeclineReason, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModerationNotifications_SendModerationRequestDeclineReason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationNotificationsClient) NotifyAboutDeclinedTitleTranslateRequest(ctx context.Context, in *TitleTranslateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModerationNotifications_NotifyAboutDeclinedTitleTranslateRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModerationNotificationsServer is the server API for ModerationNotifications service.
// All implementations must embed UnimplementedModerationNotificationsServer
// for forward compatibility.
type ModerationNotificationsServer interface {
	NotifyAboutApprovedModerationRequest(context.Context, *ApprovedEntity) (*emptypb.Empty, error)
	NotifyUserAboutVerificatedAccount(context.Context, *VerificatedUser) (*emptypb.Empty, error)
	NotifyAboutApprovedTitleTranslateRequest(context.Context, *TitleTranslateRequest) (*emptypb.Empty, error)
	NotifyAboutNewChapterInTitle(context.Context, *Chapter) (*emptypb.Empty, error)
	SendMessageToUser(context.Context, *MessageFromModerator) (*emptypb.Empty, error)
	SendModerationRequestDeclineReason(context.Context, *ModerationRequestDeclineReason) (*emptypb.Empty, error)
	NotifyAboutDeclinedTitleTranslateRequest(context.Context, *TitleTranslateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedModerationNotificationsServer()
}

// UnimplementedModerationNotificationsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModerationNotificationsServer struct{}

func (UnimplementedModerationNotificationsServer) NotifyAboutApprovedModerationRequest(context.Context, *ApprovedEntity) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAboutApprovedModerationRequest not implemented")
}
func (UnimplementedModerationNotificationsServer) NotifyUserAboutVerificatedAccount(context.Context, *VerificatedUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUserAboutVerificatedAccount not implemented")
}
func (UnimplementedModerationNotificationsServer) NotifyAboutApprovedTitleTranslateRequest(context.Context, *TitleTranslateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAboutApprovedTitleTranslateRequest not implemented")
}
func (UnimplementedModerationNotificationsServer) NotifyAboutNewChapterInTitle(context.Context, *Chapter) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAboutNewChapterInTitle not implemented")
}
func (UnimplementedModerationNotificationsServer) SendMessageToUser(context.Context, *MessageFromModerator) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageToUser not implemented")
}
func (UnimplementedModerationNotificationsServer) SendModerationRequestDeclineReason(context.Context, *ModerationRequestDeclineReason) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendModerationRequestDeclineReason not implemented")
}
func (UnimplementedModerationNotificationsServer) NotifyAboutDeclinedTitleTranslateRequest(context.Context, *TitleTranslateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAboutDeclinedTitleTranslateRequest not implemented")
}
func (UnimplementedModerationNotificationsServer) mustEmbedUnimplementedModerationNotificationsServer() {
}
func (UnimplementedModerationNotificationsServer) testEmbeddedByValue() {}

// UnsafeModerationNotificationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModerationNotificationsServer will
// result in compilation errors.
type UnsafeModerationNotificationsServer interface {
	mustEmbedUnimplementedModerationNotificationsServer()
}

func RegisterModerationNotificationsServer(s grpc.ServiceRegistrar, srv ModerationNotificationsServer) {
	// If the following call pancis, it indicates UnimplementedModerationNotificationsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModerationNotifications_ServiceDesc, srv)
}

func _ModerationNotifications_NotifyAboutApprovedModerationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovedEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationNotificationsServer).NotifyAboutApprovedModerationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationNotifications_NotifyAboutApprovedModerationRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationNotificationsServer).NotifyAboutApprovedModerationRequest(ctx, req.(*ApprovedEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationNotifications_NotifyUserAboutVerificatedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificatedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationNotificationsServer).NotifyUserAboutVerificatedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationNotifications_NotifyUserAboutVerificatedAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationNotificationsServer).NotifyUserAboutVerificatedAccount(ctx, req.(*VerificatedUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationNotifications_NotifyAboutApprovedTitleTranslateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitleTranslateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationNotificationsServer).NotifyAboutApprovedTitleTranslateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationNotifications_NotifyAboutApprovedTitleTranslateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationNotificationsServer).NotifyAboutApprovedTitleTranslateRequest(ctx, req.(*TitleTranslateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationNotifications_NotifyAboutNewChapterInTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chapter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationNotificationsServer).NotifyAboutNewChapterInTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationNotifications_NotifyAboutNewChapterInTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationNotificationsServer).NotifyAboutNewChapterInTitle(ctx, req.(*Chapter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationNotifications_SendMessageToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageFromModerator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationNotificationsServer).SendMessageToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationNotifications_SendMessageToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationNotificationsServer).SendMessageToUser(ctx, req.(*MessageFromModerator))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationNotifications_SendModerationRequestDeclineReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModerationRequestDeclineReason)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationNotificationsServer).SendModerationRequestDeclineReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationNotifications_SendModerationRequestDeclineReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationNotificationsServer).SendModerationRequestDeclineReason(ctx, req.(*ModerationRequestDeclineReason))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationNotifications_NotifyAboutDeclinedTitleTranslateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitleTranslateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationNotificationsServer).NotifyAboutDeclinedTitleTranslateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationNotifications_NotifyAboutDeclinedTitleTranslateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationNotificationsServer).NotifyAboutDeclinedTitleTranslateRequest(ctx, req.(*TitleTranslateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModerationNotifications_ServiceDesc is the grpc.ServiceDesc for ModerationNotifications service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModerationNotifications_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moderation_notifications.ModerationNotifications",
	HandlerType: (*ModerationNotificationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyAboutApprovedModerationRequest",
			Handler:    _ModerationNotifications_NotifyAboutApprovedModerationRequest_Handler,
		},
		{
			MethodName: "NotifyUserAboutVerificatedAccount",
			Handler:    _ModerationNotifications_NotifyUserAboutVerificatedAccount_Handler,
		},
		{
			MethodName: "NotifyAboutApprovedTitleTranslateRequest",
			Handler:    _ModerationNotifications_NotifyAboutApprovedTitleTranslateRequest_Handler,
		},
		{
			MethodName: "NotifyAboutNewChapterInTitle",
			Handler:    _ModerationNotifications_NotifyAboutNewChapterInTitle_Handler,
		},
		{
			MethodName: "SendMessageToUser",
			Handler:    _ModerationNotifications_SendMessageToUser_Handler,
		},
		{
			MethodName: "SendModerationRequestDeclineReason",
			Handler:    _ModerationNotifications_SendModerationRequestDeclineReason_Handler,
		},
		{
			MethodName: "NotifyAboutDeclinedTitleTranslateRequest",
			Handler:    _ModerationNotifications_NotifyAboutDeclinedTitleTranslateRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moderation_notifications.proto",
}
