// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: site_notifications.proto

package site_notifications

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SiteNotifications_NotifyAboutNewModerationRequest_FullMethodName     = "/site_notifications.SiteNotifications/NotifyAboutNewModerationRequest"
	SiteNotifications_NotifyAboutTeamJoinRequestResponse_FullMethodName  = "/site_notifications.SiteNotifications/NotifyAboutTeamJoinRequestResponse"
	SiteNotifications_NotifyAboutSubmittedTeamJoinRequest_FullMethodName = "/site_notifications.SiteNotifications/NotifyAboutSubmittedTeamJoinRequest"
	SiteNotifications_NotifyAboutNewRole_FullMethodName                  = "/site_notifications.SiteNotifications/NotifyAboutNewRole"
	SiteNotifications_NotifyAboutTitleTranslateRequest_FullMethodName    = "/site_notifications.SiteNotifications/NotifyAboutTitleTranslateRequest"
)

// SiteNotificationsClient is the client API for SiteNotifications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiteNotificationsClient interface {
	NotifyAboutNewModerationRequest(ctx context.Context, in *ModerationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NotifyAboutTeamJoinRequestResponse(ctx context.Context, in *TeamJoinRequestResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NotifyAboutSubmittedTeamJoinRequest(ctx context.Context, in *TeamJoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NotifyAboutNewRole(ctx context.Context, in *NewRole, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NotifyAboutTitleTranslateRequest(ctx context.Context, in *TitleTranslateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type siteNotificationsClient struct {
	cc grpc.ClientConnInterface
}

func NewSiteNotificationsClient(cc grpc.ClientConnInterface) SiteNotificationsClient {
	return &siteNotificationsClient{cc}
}

func (c *siteNotificationsClient) NotifyAboutNewModerationRequest(ctx context.Context, in *ModerationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SiteNotifications_NotifyAboutNewModerationRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteNotificationsClient) NotifyAboutTeamJoinRequestResponse(ctx context.Context, in *TeamJoinRequestResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SiteNotifications_NotifyAboutTeamJoinRequestResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteNotificationsClient) NotifyAboutSubmittedTeamJoinRequest(ctx context.Context, in *TeamJoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SiteNotifications_NotifyAboutSubmittedTeamJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteNotificationsClient) NotifyAboutNewRole(ctx context.Context, in *NewRole, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SiteNotifications_NotifyAboutNewRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteNotificationsClient) NotifyAboutTitleTranslateRequest(ctx context.Context, in *TitleTranslateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SiteNotifications_NotifyAboutTitleTranslateRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteNotificationsServer is the server API for SiteNotifications service.
// All implementations must embed UnimplementedSiteNotificationsServer
// for forward compatibility.
type SiteNotificationsServer interface {
	NotifyAboutNewModerationRequest(context.Context, *ModerationRequest) (*emptypb.Empty, error)
	NotifyAboutTeamJoinRequestResponse(context.Context, *TeamJoinRequestResponse) (*emptypb.Empty, error)
	NotifyAboutSubmittedTeamJoinRequest(context.Context, *TeamJoinRequest) (*emptypb.Empty, error)
	NotifyAboutNewRole(context.Context, *NewRole) (*emptypb.Empty, error)
	NotifyAboutTitleTranslateRequest(context.Context, *TitleTranslateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSiteNotificationsServer()
}

// UnimplementedSiteNotificationsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSiteNotificationsServer struct{}

func (UnimplementedSiteNotificationsServer) NotifyAboutNewModerationRequest(context.Context, *ModerationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAboutNewModerationRequest not implemented")
}
func (UnimplementedSiteNotificationsServer) NotifyAboutTeamJoinRequestResponse(context.Context, *TeamJoinRequestResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAboutTeamJoinRequestResponse not implemented")
}
func (UnimplementedSiteNotificationsServer) NotifyAboutSubmittedTeamJoinRequest(context.Context, *TeamJoinRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAboutSubmittedTeamJoinRequest not implemented")
}
func (UnimplementedSiteNotificationsServer) NotifyAboutNewRole(context.Context, *NewRole) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAboutNewRole not implemented")
}
func (UnimplementedSiteNotificationsServer) NotifyAboutTitleTranslateRequest(context.Context, *TitleTranslateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAboutTitleTranslateRequest not implemented")
}
func (UnimplementedSiteNotificationsServer) mustEmbedUnimplementedSiteNotificationsServer() {}
func (UnimplementedSiteNotificationsServer) testEmbeddedByValue()                           {}

// UnsafeSiteNotificationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiteNotificationsServer will
// result in compilation errors.
type UnsafeSiteNotificationsServer interface {
	mustEmbedUnimplementedSiteNotificationsServer()
}

func RegisterSiteNotificationsServer(s grpc.ServiceRegistrar, srv SiteNotificationsServer) {
	// If the following call pancis, it indicates UnimplementedSiteNotificationsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SiteNotifications_ServiceDesc, srv)
}

func _SiteNotifications_NotifyAboutNewModerationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteNotificationsServer).NotifyAboutNewModerationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteNotifications_NotifyAboutNewModerationRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteNotificationsServer).NotifyAboutNewModerationRequest(ctx, req.(*ModerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteNotifications_NotifyAboutTeamJoinRequestResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamJoinRequestResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteNotificationsServer).NotifyAboutTeamJoinRequestResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteNotifications_NotifyAboutTeamJoinRequestResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteNotificationsServer).NotifyAboutTeamJoinRequestResponse(ctx, req.(*TeamJoinRequestResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteNotifications_NotifyAboutSubmittedTeamJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteNotificationsServer).NotifyAboutSubmittedTeamJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteNotifications_NotifyAboutSubmittedTeamJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteNotificationsServer).NotifyAboutSubmittedTeamJoinRequest(ctx, req.(*TeamJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteNotifications_NotifyAboutNewRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteNotificationsServer).NotifyAboutNewRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteNotifications_NotifyAboutNewRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteNotificationsServer).NotifyAboutNewRole(ctx, req.(*NewRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteNotifications_NotifyAboutTitleTranslateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TitleTranslateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteNotificationsServer).NotifyAboutTitleTranslateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteNotifications_NotifyAboutTitleTranslateRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteNotificationsServer).NotifyAboutTitleTranslateRequest(ctx, req.(*TitleTranslateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SiteNotifications_ServiceDesc is the grpc.ServiceDesc for SiteNotifications service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiteNotifications_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "site_notifications.SiteNotifications",
	HandlerType: (*SiteNotificationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyAboutNewModerationRequest",
			Handler:    _SiteNotifications_NotifyAboutNewModerationRequest_Handler,
		},
		{
			MethodName: "NotifyAboutTeamJoinRequestResponse",
			Handler:    _SiteNotifications_NotifyAboutTeamJoinRequestResponse_Handler,
		},
		{
			MethodName: "NotifyAboutSubmittedTeamJoinRequest",
			Handler:    _SiteNotifications_NotifyAboutSubmittedTeamJoinRequest_Handler,
		},
		{
			MethodName: "NotifyAboutNewRole",
			Handler:    _SiteNotifications_NotifyAboutNewRole_Handler,
		},
		{
			MethodName: "NotifyAboutTitleTranslateRequest",
			Handler:    _SiteNotifications_NotifyAboutTitleTranslateRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "site_notifications.proto",
}
